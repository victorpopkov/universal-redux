name: CI

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

permissions: read-all

env:
  SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
  SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
  SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        node_version: [14.x]
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Send Slack notification
        uses: codedsolar/slack-action@v1
        if: ${{ github.event_name != 'pull_request' }}
        id: slack
        with:
          status: in-progress
          fields: |
            {STATUS}
            {REF}
            Node.js: ${{ matrix.node_version }}
      - name: Set up Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
      - name: Install
        run: yarn install --ignore-scripts
      - name: Build
        id: build
        run: |
          yarn build
          export STATUS="$?"
          if [ "${STATUS}" -eq 0 ]; then exit 0; else exit 1; fi
        env:
          NODE_ENV: production
      - name: Update Slack notification
        uses: codedsolar/slack-action@v1
        if: ${{ github.event_name != 'pull_request' && always() }}
        with:
          status: ${{ job.status }}
          timestamp: ${{ steps.slack.outputs.slack-timestamp }}
          fields: |
            {STATUS}
            {REF}
            Node.js: ${{ matrix.node_version }}

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        node_version: [14.x]
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Send Slack notification
        uses: codedsolar/slack-action@v1
        if: ${{ github.event_name != 'pull_request' }}
        id: slack
        with:
          status: in-progress
          fields: |
            {STATUS}
            {REF}
            Node.js: ${{ matrix.node_version }}
            JavaScript (ESLint): Checking...
            Markdown (Prettier): Checking...
            SCSS (Prettier): Checking...
            YAML (Prettier): Checking...
      - name: Set up Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node_version }}
      - name: Install
        run: yarn install --ignore-scripts
        env:
          NODE_ENV: development
      - name: Lint
        id: lint
        run: |
          # export
          export LINT_ISSUES_JS=$(yarn ci:eslint | grep Issues | awk -F' ' '{ print $2 }')
          export LINT_ISSUES_MD=$(($(yarn ci:prettier:md | wc -l) - 5))
          export LINT_ISSUES_MD=$((LINT_ISSUES_MD < 0 ? 0 : LINT_ISSUES_MD))
          export LINT_ISSUES_SCSS=$(($(yarn ci:prettier:scss | wc -l) - 5))
          export LINT_ISSUES_SCSS=$((LINT_ISSUES_SCSS < 0 ? 0 : LINT_ISSUES_SCSS))
          export LINT_ISSUES_YML=$(($(yarn ci:prettier:yml | wc -l) - 5))
          export LINT_ISSUES_YML=$((LINT_ISSUES_YML < 0 ? 0 : LINT_ISSUES_YML))
          export LINT_ISSUES=$((LINT_ISSUES_JS + LINT_ISSUES_MD + LINT_ISSUES_SCSS + LINT_ISSUES_YML))

          # outputs
          echo "issues=${LINT_ISSUES}" >> $GITHUB_OUTPUT
          echo "issues-js=${LINT_ISSUES_JS}" >> $GITHUB_OUTPUT
          echo "issues-md=${LINT_ISSUES_MD}" >> $GITHUB_OUTPUT
          echo "issues-scss=${LINT_ISSUES_SCSS}" >> $GITHUB_OUTPUT
          echo "issues-yml=${LINT_ISSUES_YML}" >> $GITHUB_OUTPUT

          # lint
          yarn lint || true

          # status
          if [ "${LINT_ISSUES}" -eq 0 ]; then
            exit 0
          else
            exit 1
          fi
      - name: Update Slack notification
        uses: codedsolar/slack-action@v1
        if: ${{ github.event_name != 'pull_request' && always() }}
        with:
          status: ${{ job.status }}
          timestamp: ${{ steps.slack.outputs.slack-timestamp }}
          fields: |
            {STATUS}
            {REF}
            Node.js: ${{ matrix.node_version }}
            JavaScript (ESLint): ${{ steps.lint.outputs.issues-js }}
            Markdown (Prettier): ${{ steps.lint.outputs.issues-md }}
            SCSS (Prettier): ${{ steps.lint.outputs.issues-scss }}
            YAML (Prettier): ${{ steps.lint.outputs.issues-yml }}
