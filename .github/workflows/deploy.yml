name: Deploy

on:
  push:
    branches:
      - main

permissions: read-all

env:
  SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
  SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}
  SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}

jobs:
  production:
    environment: production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        node_version: [14.x]
    steps:
      - name: Check out
        uses: actions/checkout@v3
      - name: Set a job-wide environment variables
        run: |
          echo "APP_REVISION=$(git rev-parse HEAD)" >> $GITHUB_ENV
          echo "DOCKER_IMAGE=${{ secrets.PRIVATE_REGISTRY }}/universal-redux" >> $GITHUB_ENV
          echo "DOCKER_IMAGE_TAG=latest" >> $GITHUB_ENV
      - name: Set up Node.js ${{ matrix.node_version }}
        uses: actions/setup-node@v3
        id: node
        with:
          node-version: ${{ matrix.node_version }}
      - name: Send Slack notification
        uses: codedsolar/slack-action@v1
        if: ${{ github.event_name != 'pull_request' }}
        id: slack
        with:
          status: in-progress
          fields: |
            {STATUS}
            {REF}
            Node.js: ${{ steps.node.outputs.node-version }}
      - name: Install
        run: yarn install --ignore-scripts
        env:
          BABEL_ENV: development
          NODE_ENV: development
      - name: Build
        id: build
        run: |
          yarn build
          export STATUS="$?"
          if [ "${STATUS}" -eq 0 ]; then exit 0; else exit 1; fi
        env:
          # environment
          BABEL_ENV: production
          NODE_ENV: production
          # general
          APP_BASE_PATH: /universal-redux
          APP_HOST: 0.0.0.0
          APP_MORGAN_FORMAT: ${{ secrets.APP_MORGAN_FORMAT }}
          APP_PORT: 8080
          APP_PUBLIC_PATH: /universal-redux/
          # api
          APP_API_PORT: 3030
          APP_API_PROXY_DISABLED: 0
          APP_API_PROXY_PATH: /api
          APP_API_PROXY_TARGET: http://0.0.0.0:3030
          APP_API_TARGET: http://0.0.0.0:3030
          # other
          NODE_PATH: ./src
          UNIVERSAL_WEBPACK_CSS_LOADER_V4: true
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to the private registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.PRIVATE_REGISTRY }}
          username: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
          password: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}
      - name: Generate an image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.DOCKER_IMAGE }}
          flavor: latest=true
          labels: maintainer=victor@popkov.me
      - name: Build an image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm/v7
          pull: true
          push: ${{ !env.ACT && github.ref == 'refs/heads/main' }}
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_IMAGE_TAG }}
          cache-to: type=inline
          build-args: APP_REVISION=${{ env.APP_REVISION }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Add Docker certificates to access the remote host
        if: ${{ !env.ACT }}
        run: |
          mkdir -p "${DOCKER_CERT_PATH}"
          echo "${DOCKER_TLS_CA}" > "${DOCKER_CERT_PATH}/ca.pem"
          echo "${DOCKER_TLS_CERT}" > "${DOCKER_CERT_PATH}/cert.pem"
          echo "${DOCKER_TLS_KEY}" > "${DOCKER_CERT_PATH}/key.pem"
          chmod 400 "${DOCKER_CERT_PATH}/ca.pem"
          chmod 400 "${DOCKER_CERT_PATH}/cert.pem"
          chmod 400 "${DOCKER_CERT_PATH}/key.pem"
        env:
          DOCKER_CERT_PATH: /home/runner/.docker/deploy/
          DOCKER_TLS_CA: ${{ secrets.DOCKER_TLS_CA }}
          DOCKER_TLS_CERT: ${{ secrets.DOCKER_TLS_CERT }}
          DOCKER_TLS_KEY: ${{ secrets.DOCKER_TLS_KEY }}
      - name: Deploy Docker Stack
        if: ${{ !env.ACT }}
        run: |
          docker stack rm "${DOCKER_STACK_NAME}"
          docker stack deploy \
            --with-registry-auth \
            --resolve-image=always \
            --compose-file=docker-stack.yml \
            --prune \
            "${DOCKER_STACK_NAME}"
        env:
          # docker
          DOCKER_CERT_PATH: /home/runner/.docker/deploy/
          DOCKER_HOST: ${{ secrets.DOCKER_HOST }}
          DOCKER_TLS_VERIFY: 1
          # docker stack
          DOCKER_STACK_NAME: github_universal_redux
          DOCKER_STACK_NODE_HOSTNAME: ${{ secrets.DOCKER_STACK_NODE_HOSTNAME }}
          # loki
          LOKI_PIPELINE_STAGE_FILE: /etc/loki/pipelines/morgan.yml
          LOKI_URL: ${{ secrets.LOKI_URL }}
          # traefik
          TRAEFIK_HOSTNAME: github.victorpopkov.com
          TRAEFIK_NAME: github-universal-redux
          TRAEFIK_PATH_PREFIX: /universal-redux/
      - name: Update Slack notification
        uses: codedsolar/slack-action@v1
        if: ${{ github.event_name != 'pull_request' && always() }}
        with:
          status: ${{ job.status }}
          timestamp: ${{ steps.slack.outputs.slack-timestamp }}
          fields: |
            {STATUS}
            {REF}
            Node.js: ${{ steps.node.outputs.node-version }}
